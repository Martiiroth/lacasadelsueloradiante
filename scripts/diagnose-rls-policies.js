#!/usr/bin/env node

// Diagn√≥stico espec√≠fico de pol√≠ticas RLS para storage.objects
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

console.log('üîç DIAGN√ìSTICO POL√çTICAS RLS - STORAGE.OBJECTS\n');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables de entorno faltantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosePolicies() {
  console.log('1Ô∏è‚É£ Consultando pol√≠ticas RLS existentes...\n');
  
  try {
    // Consultar pol√≠ticas existentes usando una query SQL
    const { data: policies, error } = await supabase
      .rpc('get_storage_policies');

    if (error) {
      console.log('‚ö†Ô∏è No se puede consultar pol√≠ticas directamente (normal con anon key)');
      console.log('Error:', error.message);
    } else {
      console.log('üìã Pol√≠ticas encontradas:', policies);
    }

  } catch (err) {
    console.log('‚ö†Ô∏è No se pueden consultar pol√≠ticas con anon key (esperado)');
  }

  console.log('\n2Ô∏è‚É£ Probando acceso espec√≠fico...\n');

  // Test 1: Listar archivos (requiere pol√≠tica SELECT)
  console.log('Test SELECT (lectura):');
  try {
    const { data: files, error: listError } = await supabase.storage
      .from('brand-logos')
      .list();

    if (listError) {
      console.log('‚ùå FALLA SELECT:', listError.message);
    } else {
      console.log('‚úÖ SELECT funciona - pol√≠tica de lectura configurada');
    }
  } catch (err) {
    console.log('‚ùå SELECT error:', err.message);
  }

  // Test 2: Subir archivo (requiere pol√≠tica INSERT)  
  console.log('\nTest INSERT (subida):');
  try {
    const testContent = 'test';
    const fileName = `test-${Date.now()}.txt`;

    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('brand-logos')
      .upload(fileName, testContent, {
        contentType: 'text/plain'
      });

    if (uploadError) {
      console.log('‚ùå FALLA INSERT:', uploadError.message);
      
      if (uploadError.message.includes('row-level security')) {
        console.log('\nüîí DIAGN√ìSTICO:');
        console.log('- El bucket existe y es accesible');
        console.log('- PERO las pol√≠ticas RLS no est√°n configuradas');
        console.log('- Necesitas crear las pol√≠ticas manualmente');
      }
    } else {
      console.log('‚úÖ INSERT funciona - pol√≠tica de subida configurada');
      
      // Limpiar archivo de prueba
      await supabase.storage.from('brand-logos').remove([fileName]);
    }
  } catch (err) {
    console.log('‚ùå INSERT error:', err.message);
  }

  console.log('\nüìã ESTADO ACTUAL:');
  console.log('- Bucket "brand-logos": ‚úÖ Existe y es accesible');
  console.log('- Pol√≠tica SELECT: ‚ùì Probar con lista de archivos');
  console.log('- Pol√≠tica INSERT: ‚ùå Falla con "row-level security policy"');

  console.log('\nüõ†Ô∏è PR√ìXIMOS PASOS:');
  console.log('1. Ve a Supabase Dashboard ‚Üí Storage ‚Üí Policies');
  console.log('2. Busca la tabla "storage.objects"');
  console.log('3. Crea pol√≠tica SELECT para "public" con: bucket_id = \'brand-logos\'');
  console.log('4. Crea pol√≠tica INSERT para "authenticated" con: bucket_id = \'brand-logos\'');
  console.log('5. Ejecuta este script otra vez para verificar');

  console.log('\nüìù ALTERNATIVA SQL:');
  console.log('Ejecuta este SQL en Supabase SQL Editor:');
  console.log(`
CREATE POLICY "Public read brand logos" 
ON storage.objects FOR SELECT TO public 
USING (bucket_id = 'brand-logos');

CREATE POLICY "Authenticated upload brand logos" 
ON storage.objects FOR INSERT TO authenticated 
WITH CHECK (bucket_id = 'brand-logos');
  `);
}

diagnosePolicies();