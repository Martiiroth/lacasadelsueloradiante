// Diagn√≥stico de conectividad de Supabase Storage
// Ejecutar este archivo para verificar la configuraci√≥n

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function diagnosticarSupabase() {
  console.log('üîç Iniciando diagn√≥stico de Supabase Storage...\n');

  // 1. Verificar variables de entorno
  console.log('üìã Variables de entorno:');
  console.log('   SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL || '‚ùå NO DEFINIDA');
  console.log('   SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Definida' : '‚ùå NO DEFINIDA');
  console.log();

  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.error('‚ùå Error: Variables de entorno no configuradas correctamente');
    return;
  }

  // 2. Crear cliente de Supabase
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );

  console.log('‚úÖ Cliente de Supabase creado');

  // 3. Verificar conectividad b√°sica
  try {
    console.log('üîó Probando conectividad b√°sica...');
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.warn('‚ö†Ô∏è  Advertencia en auth.getSession():', error.message);
    } else {
      console.log('‚úÖ Conectividad b√°sica OK');
    }
  } catch (error) {
    console.error('‚ùå Error de conectividad b√°sica:', error.message);
    return;
  }

  // 4. Verificar acceso a Storage
  try {
    console.log('üì¶ Verificando acceso a Storage...');
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('‚ùå Error listando buckets:', error.message);
      console.error('   C√≥digo:', error.status || 'N/A');
      console.error('   Detalles:', error);
      return;
    }

    console.log('‚úÖ Acceso a Storage OK');
    console.log('üìã Buckets disponibles:', buckets.map(b => b.name).join(', ') || 'Ninguno');
    
    // Verificar si existe product-images
    const productImagesBucket = buckets.find(b => b.name === 'product-images');
    if (productImagesBucket) {
      console.log('‚úÖ Bucket "product-images" encontrado');
      console.log('   P√∫blico:', productImagesBucket.public ? '‚úÖ S√≠' : '‚ùå No');
    } else {
      console.log('‚ùå Bucket "product-images" NO encontrado');
    }

  } catch (error) {
    console.error('‚ùå Error accediendo a Storage:', error.message);
    return;
  }

  // 5. Probar subida de archivo de prueba
  const productImagesBucket = buckets.find(b => b.name === 'product-images');
  if (productImagesBucket) {
    try {
      console.log('\nüì§ Probando subida de archivo de prueba...');
      
      // Crear un archivo de prueba simple
      const testData = 'test-file-content';
      const fileName = `test-${Date.now()}.txt`;
      
      const { data, error } = await supabase.storage
        .from('product-images')
        .upload(`test/${fileName}`, testData, {
          contentType: 'text/plain',
          upsert: false
        });

      if (error) {
        console.error('‚ùå Error subiendo archivo de prueba:', error.message);
        console.error('   C√≥digo:', error.status || 'N/A');
        console.error('   Detalles:', error);
      } else {
        console.log('‚úÖ Archivo de prueba subido exitosamente');
        console.log('   Path:', data.path);
        
        // Limpiar - eliminar archivo de prueba
        const { error: deleteError } = await supabase.storage
          .from('product-images')
          .remove([data.path]);
        
        if (deleteError) {
          console.warn('‚ö†Ô∏è No se pudo limpiar el archivo de prueba:', deleteError.message);
        } else {
          console.log('‚úÖ Archivo de prueba limpiado');
        }
      }

    } catch (error) {
      console.error('‚ùå Error en prueba de subida:', error.message);
    }
  }

  console.log('\nüéØ Diagn√≥stico completado');
}

// Ejecutar diagn√≥stico
diagnosticarSupabase().catch(console.error);