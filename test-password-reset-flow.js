#!/usr/bin/env node
/**
 * Script para probar el flujo completo de recuperaci√≥n de contrase√±a
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Cargar variables de entorno
dotenv.config({ path: '.env.local' })
dotenv.config({ path: '.env' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

console.log('üîß Configuraci√≥n de Supabase:')
console.log(`URL: ${supabaseUrl}`)
console.log(`Service Key: ${supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå Falta'}`)
console.log('')

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Faltan variables de entorno de Supabase')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testPasswordResetFlow() {
  const testEmail = 'javipablo0408@gmail.com'
  
  console.log('üß™ PROBANDO FLUJO DE RECUPERACI√ìN DE CONTRASE√ëA')
  console.log('='.repeat(60))
  console.log('')

  // 1. Verificar que el usuario existe
  console.log('1Ô∏è‚É£ Verificando que el usuario existe...')
  try {
    const { data: users, error } = await supabase.auth.admin.listUsers()
    
    if (error) {
      console.error('‚ùå Error consultando usuarios:', error.message)
      return
    }

    const user = users.users.find(u => u.email === testEmail)
    
    if (!user) {
      console.log(`‚ùå Usuario ${testEmail} no encontrado`)
      console.log('üìã Usuarios disponibles:')
      users.users.forEach(u => console.log(`   - ${u.email}`))
      return
    }
    
    console.log(`‚úÖ Usuario encontrado: ${user.email}`)
    console.log(`   ID: ${user.id}`)
    console.log(`   Creado: ${new Date(user.created_at).toLocaleString()}`)
  } catch (error) {
    console.error('‚ùå Error:', error.message)
    return
  }

  console.log('')

  // 2. Probar configuraci√≥n de Auth
  console.log('2Ô∏è‚É£ Verificando configuraci√≥n de Auth...')
  try {
    // Obtener configuraci√≥n de Auth
    const { data: config, error } = await supabase.auth.admin.getUser(
      // Usar el primer usuario para probar que la configuraci√≥n funciona
      (await supabase.auth.admin.listUsers()).data.users[0].id
    )
    
    if (error) {
      console.error('‚ùå Error en configuraci√≥n Auth:', error.message)
      return
    }
    
    console.log('‚úÖ Configuraci√≥n de Auth funcional')
  } catch (error) {
    console.error('‚ùå Error verificando Auth:', error.message)
    return
  }

  console.log('')

  // 3. Simular env√≠o de reset email (usando API local)
  console.log('3Ô∏è‚É£ Probando env√≠o de reset email...')
  try {
    const response = await fetch('http://localhost:3000/api/send-reset-email', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail })
    })

    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ API de reset email funciona correctamente')
      console.log(`   Respuesta: ${result.message}`)
    } else {
      console.log('‚ùå Error en API de reset email')
      console.log(`   Error: ${result.error}`)
    }
  } catch (error) {
    console.log('‚ö†Ô∏è No se pudo conectar al servidor local (puerto 3000)')
    console.log('   Esto es normal si el servidor no est√° corriendo')
    console.log(`   Error: ${error.message}`)
  }

  console.log('')

  // 4. Verificar configuraci√≥n de variables de entorno
  console.log('4Ô∏è‚É£ Verificando variables de entorno...')
  
  const requiredVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY', 
    'SUPABASE_SERVICE_ROLE_KEY',
    'NEXT_PUBLIC_SITE_URL'
  ]

  let allConfigured = true
  requiredVars.forEach(varName => {
    const value = process.env[varName]
    if (value) {
      console.log(`‚úÖ ${varName}: Configurada`)
    } else {
      console.log(`‚ùå ${varName}: FALTA`)
      allConfigured = false
    }
  })

  console.log('')

  // 5. Resumen
  console.log('üìã RESUMEN DE LA CONFIGURACI√ìN')
  console.log('='.repeat(40))
  
  if (allConfigured) {
    console.log('‚úÖ Todas las variables de entorno est√°n configuradas')
  } else {
    console.log('‚ùå Faltan algunas variables de entorno')
  }

  console.log('')
  console.log('üîó URLs del flujo:')
  console.log(`   Solicitar reset: ${process.env.NEXT_PUBLIC_SITE_URL}/auth/forgot-password`)
  console.log(`   Reset password: ${process.env.NEXT_PUBLIC_SITE_URL}/auth/reset-password`)
  
  console.log('')
  console.log('üìß Configuraci√≥n de emails:')
  console.log('   ‚ö†Ô∏è Supabase maneja el env√≠o de emails autom√°ticamente')
  console.log('   ‚ö†Ô∏è Verifica la configuraci√≥n SMTP en el dashboard de Supabase')
  console.log('   ‚ö†Ô∏è URL: https://supabase.lacasadelsueloradianteapp.com')

  console.log('')
  console.log('üéØ PR√ìXIMOS PASOS:')
  console.log('1. Verificar configuraci√≥n SMTP en el dashboard de Supabase')
  console.log('2. Probar el flujo completo en el navegador')
  console.log('3. Revisar logs de Supabase para ver si los emails se est√°n enviando')
}

// Ejecutar el test
testPasswordResetFlow().catch(console.error)