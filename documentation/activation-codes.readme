# Sistema de C√≥digos de Activaci√≥n Premium

Sistema de c√≥digos de activaci√≥n para desbloquear funcionalidades premium en la app m√≥vil. Los c√≥digos se generan autom√°ticamente al completar una compra y expiran 30 d√≠as despu√©s.

## üìã Caracter√≠sticas

- ‚úÖ Generaci√≥n autom√°tica de c√≥digos al completar pedido (status: delivered)
- ‚úÖ Formato de c√≥digo: `XXXX-XXXX-XXXX` (12 caracteres sin ambig√ºedades)
- ‚úÖ Expiraci√≥n autom√°tica a los 30 d√≠as
- ‚úÖ Validaci√≥n desde API REST para apps m√≥viles
- ‚úÖ Tracking de dispositivos y versiones de app
- ‚úÖ Revocaci√≥n de c√≥digos (ej: si se cancela pedido)
- ‚úÖ Panel para clientes con sus c√≥digos activos

## üóÑÔ∏è Base de Datos

### Tabla `activation_codes`

```sql
CREATE TABLE activation_codes (
  id UUID PRIMARY KEY,
  code VARCHAR(12) UNIQUE,          -- C√≥digo de activaci√≥n (ej: A2BC-D3FG-H4JK)
  order_id UUID REFERENCES orders,
  client_id UUID REFERENCES clients,
  status VARCHAR(20),                -- active, expired, revoked
  created_at TIMESTAMP,
  expires_at TIMESTAMP,              -- created_at + 30 d√≠as
  activated_at TIMESTAMP,            -- Primera validaci√≥n
  last_validated_at TIMESTAMP,       -- √öltima validaci√≥n
  device_id VARCHAR(255),            -- Dispositivo que activ√≥
  metadata JSONB                     -- Info adicional (app version, platform, etc)
);
```

### Migraci√≥n

Ejecutar en Supabase SQL Editor:

```bash
# Desde la carpeta database/
psql -f create_activation_codes_table.sql
```

O copiar y pegar el contenido del archivo en el SQL Editor de Supabase.

## üîß Uso del Sistema

### 1. Generaci√≥n Autom√°tica

Los c√≥digos se generan autom√°ticamente cuando un pedido cambia a `delivered`:

```typescript
// En adminService.ts - updateOrderStatus()
if (data.status === 'delivered') {
  // 1. Genera factura
  const invoice = await InvoiceService.createInvoiceFromOrder(...)
  
  // 2. Genera c√≥digo de activaci√≥n
  const activationCode = await ActivationCodesService.generateCodeForOrder({
    order_id: orderId,
    client_id: clientId,
    expires_in_days: 30
  })
  
  console.log('C√≥digo generado:', activationCode.code)
  // Output: A2BC-D3FG-H4JK
}
```

### 2. Validaci√≥n desde App M√≥vil

#### Endpoint: `POST /api/activation-codes/validate`

```typescript
// Ejemplo de request desde app m√≥vil
const response = await fetch('https://tudominio.com/api/activation-codes/validate', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    code: 'A2BC-D3FG-H4JK',
    device_id: 'iPhone14-ABC123',
    app_version: '1.2.3',
    platform: 'ios'
  })
})

const result = await response.json()

if (result.valid) {
  console.log('‚úÖ C√≥digo v√°lido')
  console.log('Expira en:', result.days_remaining, 'd√≠as')
  console.log('Fecha expiraci√≥n:', result.expires_at)
  
  // Habilitar funcionalidades premium en la app
  enablePremiumFeatures()
} else {
  console.log('‚ùå C√≥digo inv√°lido:', result.message)
  // Mensaje: "C√≥digo expirado", "C√≥digo no encontrado", "C√≥digo revocado"
}
```

#### Respuesta exitosa:

```json
{
  "valid": true,
  "code": {
    "id": "uuid...",
    "code": "A2BC-D3FG-H4JK",
    "status": "active",
    "expires_at": "2025-11-21T10:00:00Z",
    "activated_at": "2025-10-22T10:00:00Z"
  },
  "days_remaining": 30,
  "expires_at": "2025-11-21T10:00:00Z",
  "message": "C√≥digo v√°lido"
}
```

#### Respuesta error:

```json
{
  "valid": false,
  "message": "C√≥digo expirado"
}
```

### 3. Consultar Estado de un C√≥digo

#### Endpoint: `GET /api/activation-codes/[code]`

```typescript
const response = await fetch('https://tudominio.com/api/activation-codes/A2BC-D3FG-H4JK')
const data = await response.json()

console.log('Estado:', data.is_valid)
console.log('D√≠as restantes:', data.days_remaining)
```

Respuesta:

```json
{
  "code": {
    "id": "uuid...",
    "code": "A2BC-D3FG-H4JK",
    "status": "active",
    "order": {
      "id": "uuid...",
      "order_number": "1234",
      "total_cents": 5999
    }
  },
  "is_valid": true,
  "is_expired": false,
  "is_revoked": false,
  "days_remaining": 28,
  "expires_at": "2025-11-21T10:00:00Z"
}
```

## üßë‚Äçüíº Servicios Disponibles

### `ActivationCodesService`

```typescript
import { ActivationCodesService } from '@/lib/activationCodesService'

// Generar c√≥digo para orden
const code = await ActivationCodesService.generateCodeForOrder({
  order_id: 'uuid...',
  client_id: 'uuid...',
  expires_in_days: 30
})

// Validar c√≥digo
const validation = await ActivationCodesService.validateCode({
  code: 'A2BC-D3FG-H4JK',
  device_id: 'iPhone14-ABC123',
  app_version: '1.2.3',
  platform: 'ios'
})

// Obtener c√≥digos de un cliente
const codes = await ActivationCodesService.getClientCodes('client-uuid')

// Revocar c√≥digo
await ActivationCodesService.revokeCode('code-uuid')

// Limpiar c√≥digos expirados (ejecutar como cron job)
const expired = await ActivationCodesService.expireOldCodes()
console.log(`${expired} c√≥digos marcados como expirados`)
```

## üì± Integraci√≥n en App M√≥vil

### Flutter Example

```dart
class ActivationService {
  static const String baseUrl = 'https://tudominio.com/api';
  
  Future<bool> validateActivationCode(String code) async {
    try {
      final deviceId = await getDeviceId();
      final appVersion = await getAppVersion();
      
      final response = await http.post(
        Uri.parse('$baseUrl/activation-codes/validate'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'code': code,
          'device_id': deviceId,
          'app_version': appVersion,
          'platform': Platform.isIOS ? 'ios' : 'android',
        }),
      );
      
      final result = jsonDecode(response.body);
      
      if (result['valid']) {
        // Guardar en SharedPreferences
        await saveActivationData(result);
        return true;
      }
      
      return false;
    } catch (e) {
      print('Error validando c√≥digo: $e');
      return false;
    }
  }
  
  Future<void> saveActivationData(Map<String, dynamic> data) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('activation_code', data['code']['code']);
    await prefs.setString('expires_at', data['expires_at']);
    await prefs.setBool('is_premium', true);
  }
  
  Future<bool> isPremiumActive() async {
    final prefs = await SharedPreferences.getInstance();
    final expiresAt = prefs.getString('expires_at');
    
    if (expiresAt == null) return false;
    
    final expirationDate = DateTime.parse(expiresAt);
    return DateTime.now().isBefore(expirationDate);
  }
}
```

### React Native Example

```typescript
import AsyncStorage from '@react-native-async-storage/async-storage'

class ActivationService {
  static baseUrl = 'https://tudominio.com/api'
  
  static async validateCode(code: string): Promise<boolean> {
    try {
      const deviceId = await getDeviceId()
      const appVersion = getAppVersion()
      
      const response = await fetch(`${this.baseUrl}/activation-codes/validate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          code,
          device_id: deviceId,
          app_version: appVersion,
          platform: Platform.OS
        })
      })
      
      const result = await response.json()
      
      if (result.valid) {
        await this.saveActivationData(result)
        return true
      }
      
      return false
    } catch (error) {
      console.error('Error validating code:', error)
      return false
    }
  }
  
  static async saveActivationData(data: any) {
    await AsyncStorage.setItem('activation_code', data.code.code)
    await AsyncStorage.setItem('expires_at', data.expires_at)
    await AsyncStorage.setItem('is_premium', 'true')
  }
  
  static async isPremiumActive(): Promise<boolean> {
    try {
      const expiresAt = await AsyncStorage.getItem('expires_at')
      if (!expiresAt) return false
      
      const expirationDate = new Date(expiresAt)
      return new Date() < expirationDate
    } catch {
      return false
    }
  }
}
```

## üîê Seguridad

### Row Level Security (RLS)

Las pol√≠ticas de seguridad est√°n configuradas para:

- ‚úÖ Clientes solo pueden ver sus propios c√≥digos
- ‚úÖ Solo `service_role` puede crear/actualizar c√≥digos
- ‚úÖ API de validaci√≥n es p√∫blica (para apps)

### Formato de C√≥digo

- 12 caracteres alfanum√©ricos
- Sin caracteres ambiguos (0, O, 1, I)
- Formato: `XXXX-XXXX-XXXX`
- Probabilidad de colisi√≥n: ~1 en 3.4 √ó 10^21

## üîÑ Ciclo de Vida de un C√≥digo

```
1. COMPRA REALIZADA
   ‚îî‚îÄ> Orden creada (status: pending)

2. PAGO CONFIRMADO
   ‚îî‚îÄ> Orden actualizada (status: processing)

3. PEDIDO ENTREGADO
   ‚îî‚îÄ> Orden actualizada (status: delivered)
       ‚îú‚îÄ> ‚úÖ Factura generada autom√°ticamente
       ‚îî‚îÄ> ‚úÖ C√≥digo de activaci√≥n generado
           ‚îî‚îÄ> C√≥digo: A2BC-D3FG-H4JK
               ‚îî‚îÄ> Expira: +30 d√≠as

4. CLIENTE USA APP
   ‚îî‚îÄ> Valida c√≥digo via API
       ‚îú‚îÄ> Si v√°lido: Activa premium
       ‚îî‚îÄ> Si expirado: Muestra error

5. DESPU√âS DE 30 D√çAS
   ‚îî‚îÄ> C√≥digo expira autom√°ticamente
       ‚îî‚îÄ> status: expired
```

## üìä Consultas √ötiles

```sql
-- Ver c√≥digos activos
SELECT code, expires_at, 
       EXTRACT(DAY FROM (expires_at - NOW())) as days_remaining
FROM activation_codes
WHERE status = 'active'
AND expires_at > NOW()
ORDER BY expires_at;

-- Ver c√≥digos por cliente
SELECT c.email, ac.code, ac.status, ac.expires_at
FROM activation_codes ac
JOIN clients c ON c.id = ac.client_id
WHERE c.email = 'cliente@example.com';

-- C√≥digos por expirar (pr√≥ximos 7 d√≠as)
SELECT code, expires_at
FROM activation_codes
WHERE status = 'active'
AND expires_at BETWEEN NOW() AND NOW() + INTERVAL '7 days';

-- Estad√≠sticas
SELECT 
  status,
  COUNT(*) as total,
  ROUND(AVG(EXTRACT(EPOCH FROM (last_validated_at - created_at))/86400)) as avg_days_used
FROM activation_codes
GROUP BY status;
```

## üîÑ Cron Jobs Recomendados

### Expirar c√≥digos antiguos

```typescript
// Ejecutar diariamente
import { ActivationCodesService } from '@/lib/activationCodesService'

export async function expireOldCodes() {
  const expired = await ActivationCodesService.expireOldCodes()
  console.log(`‚úÖ ${expired} c√≥digos expirados`)
}
```

Configurar en Vercel Cron o similar:

```json
{
  "crons": [
    {
      "path": "/api/cron/expire-codes",
      "schedule": "0 2 * * *"
    }
  ]
}
```

## üêõ Troubleshooting

### El c√≥digo no se genera

1. Verificar que la tabla existe: `SELECT * FROM activation_codes LIMIT 1`
2. Verificar que el pedido cambi√≥ a `delivered`
3. Revisar logs del servidor: buscar "Generando c√≥digo de activaci√≥n"

### El c√≥digo no valida

1. Verificar formato (sin espacios, con guiones)
2. Verificar fecha de expiraci√≥n
3. Verificar estado: `SELECT status FROM activation_codes WHERE code = 'XXX'`

### CORS errors desde app

Aseg√∫rate que los endpoints tienen `OPTIONS` handler configurado para CORS.

## üìù Notas

- Los c√≥digos son de un solo uso por dispositivo (se guarda `device_id`)
- Un c√≥digo puede validarse m√∫ltiples veces desde el mismo dispositivo
- Los c√≥digos expirados no pueden reactivarse
- Los c√≥digos revocados no pueden usarse (ej: pedido cancelado)

## üîó Referencias

- Tabla: `activation_codes`
- Servicio: `src/lib/activationCodesService.ts`
- Tipos: `src/types/activation-codes.ts`
- API Validaci√≥n: `/api/activation-codes/validate`
- API Consulta: `/api/activation-codes/[code]`
